//raluces13@ole.augie.edu
//Roberto,Michael,Igor
import java.util.*;
import java.text.SimpleDateFormat;
import java.io.*;
class FutureTrendsReport 
{
 /*
 *Desc:prints all trending artists 
 *  Method uses potentialTrending vector to hold all artists who have sold paintings in the succseeding years of input
 *  Method then puts the artists who have sold more than once in vector trending then prints after sort bu using a comparator
 *Output:Prompt for date  
 *  method outputs trending artists in the following order 
 *    Name is only printed once
 *  Artist Name: 
 *  Classification:
 *  Painting title:
 *  Sale date:
 *  Target selling price:
 *  Actual selling price:
 *
 *input: it takes a strict date in the following format
 *  mm/dd/yyyy
 */
 public static void printReport()throws Exception 
 {
  Scanner keyboard =new Scanner (System.in);
  System.out.println("\t\t\tPurchase Report");
  System.out.println("_____________________________________________________________________");
  System.out.println("Enter A year 'mm/dd/yyyy'");
  String input=keyboard.nextLine();
  while(!input.matches("([0-9]{2})/([0-9]{2})/([0-9]{4})"))
  { 
   System.out.println("Input format error\n\tTry 'mm/dd/yyyy'");
   input=keyboard.nextLine();
  }
  Date currDate=makeDate(input);
  Vector<Paintings> potentialTrending = new Vector<Paintings>();
  Iterator iter= Osbert.galleryDatabase.iterator();
  while(iter.hasNext())
  { 
   Paintings curr = (Paintings)iter.next();
   Date sellingDate = makeDate(curr.getDateOfSale());
   int dateDiff=diff(sellingDate,currDate);
   if(dateDiff>0&& dateDiff<366)
   {
    if(curr.getActualSellingPrice()>curr.getTargetSellingPrice())
    potentialTrending.add(curr); 
   } 
  }
  Iterator potentialIter =potentialTrending.iterator();
  Vector<Paintings> trending = new Vector<Paintings>();
  while(potentialIter.hasNext())
  {
   Paintings currPotential = (Paintings)potentialIter.next();
   String artistFirstName = currPotential.getFirstName();
   String artistLastName = currPotential.getLastName();
   for(int i=0;i<potentialTrending.size();i++)
   {
    if( artistFirstName.equals(potentialTrending.get(i).getFirstName())&& artistLastName.equals(potentialTrending.get(i).getLastName()))
    {
     if(currPotential.equals(potentialTrending.get(i)))
      continue;
     trending.add(currPotential);
    } 
   }
  }     
  Collections.sort(trending, new PaintingsComparator());
  Iterator trendingIter = trending.iterator();
  String artistFirstName="";
  String artistLastName="";
  while(trendingIter.hasNext())
  {
   Paintings currTrending =(Paintings)trendingIter.next();
   if(!(artistFirstName.equals(currTrending.getFirstName())))
   {
    artistFirstName=currTrending.getFirstName();
    artistLastName=currTrending.getLastName();
    System.out.println("Artist Name: "+artistFirstName+" "+artistLastName); 
   }
   for(int i=0;i<trending.size();i++)
   {
    if(currTrending.equals(trending.get(i)))
     continue;
    if(currTrending.getFirstName().equals(trending.get(i).getFirstName()))
    { 
     System.out.println("\tClassification:"+currTrending.getClassification());
     System.out.println("\tPainting title:"+currTrending.getTitle());
     System.out.println("\tSale date:"+currTrending.getDateOfSale());
     System.out.println("\tTarget selling price:"+currTrending.getTargetSellingPrice());
     System.out.println("\tActual selling price:"+currTrending.getActualSellingPrice());
     System.out.println(); 
    } 
   }
  }  
 }
 //desc picks up a string in the format "MM/dd/yyyy" and returns a date
   //return: date object based on dateString
   //pre: dateString has to strictly be in (MM/dd/yyyy) format
   //throws: a shit tun of exceptions!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11################catch later 
   public static Date makeDate(String dateString) throws Exception 
   {
    SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
    return formatter.parse(dateString);
   }
 //Desc: finds the difference of two date objects 
 //return: int which is the number of days or interval of the 2 date objects
 //pre: date1,date2 must be valid Date types
 public static int diff(Date date1, Date date2) 
 {
     Calendar c1 = Calendar.getInstance();
     Calendar c2 = Calendar.getInstance();
 
     c1.setTime(date1);
     c2.setTime(date2);
     int diffDay = 0;
 
     if (c1.before(c2))
  {
      //will not use case here generic method 
   // unless user passed date1 that is before date2
   diffDay = countDayFrom(c1, c2);
     } 
  else 
  {
        diffDay = countDayFrom(c2, c1);
     }

     return diffDay;
   }
 //Desc: gives the number of days that between c1 and c2 by counting from c1 to c2+1
 //return:  an integer that is generated by countin from c1 to c2 
 public static int countDayFrom(Calendar c1, Calendar c2) 
 {
     int returnInt = 0;
   
    while (!c1.after(c2))
  {
        c1.add(Calendar.DAY_OF_MONTH, 1);
        returnInt++;
     }
  //the loop counts one more than need 
     if (returnInt > 0) 
  {
        returnInt = returnInt - 1;
     }
     return returnInt;
   } 
  
} 
//Desc: Embeded comparator Class used for sorting artists by FirstName 
class PaintingsComparator implements Comparator<Paintings> 
{
 public int compare(Paintings a, Paintings b) 
 {
  return a.getFirstName().compareTo(b.getFirstName());
 }
}
